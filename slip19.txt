Slip 19



Write a program to determine if a given graph is a Hamiltonian cycle or not.



#include <stdio.h>

#include <stdbool.h>



#define V 5 // Number of vertices in the graph



// Function to check if the vertex v can be added at index pos in the Hamiltonian Cycle

bool isSafe(int v, bool graph[V][V], int path[], int pos) {

    // Check if this vertex is an adjacent vertex of the previously added vertex

    if (!graph[path[pos - 1]][v])

        return false;



    // Check if the vertex has already been included

    for (int i = 0; i < pos; i++)

        if (path[i] == v)

            return false;



    return true;

}



// Function to recursively solve the Hamiltonian Cycle problem

bool hamCycleUtil(bool graph[V][V], int path[], int pos) {

    // Base case: if all vertices are included in the path

    if (pos == V) {

        // And if there is an edge from the last included vertex to the first vertex

        if (graph[path[pos - 1]][path[0]])

            return true;

        else

            return false;

    }



    // Try different vertices as the next candidate in the path

    for (int v = 1; v < V; v++) {

        if (isSafe(v, graph, path, pos)) {

            path[pos] = v;

            if (hamCycleUtil(graph, path, pos + 1) == true)

                return true;

            path[pos] = -1;

        }

    }



    // If no vertex can be added to the path

    return false;

}



// Function to solve the Hamiltonian Cycle problem

bool hamCycle(bool graph[V][V]) {

    int path[V];

    for (int i = 0; i < V; i++)

        path[i] = -1;



    // Start from the first vertex (vertex 0) as the first vertex in the path

    path[0] = 0;



    if (hamCycleUtil(graph, path, 1) == false) {

        printf("Solution does not exist\n");

        return false;

    }



    // Print the solution

    printf("Solution exists: Following is one Hamiltonian cycle\n");

    for (int i = 0; i < V; i++)

        printf("%d ", path[i]);

    printf("%d ", path[0]); // Include the first vertex again to form a cycle

    printf("\n");



    return true;

}



int main() {

    bool graph[V][V] = {

        {0, 1, 0, 1, 0},

        {1, 0, 1, 1, 1},

        {0, 1, 0, 0, 1},

        {1, 1, 0, 0, 1},

        {0, 1, 1, 1, 0}

    };



    hamCycle(graph);



    return 0;

}



Write a program to show board configuration of 4 queensâ€™ problem.

#include <stdio.h>



#define N 4



// Function to print the board configuration

void printBoard(int board[N][N]) {

    for (int i = 0; i < N; i++) {

        for (int j = 0; j < N; j++)

            printf("%d ", board[i][j]);

        printf("\n");

    }

}



int main() {

    // Initial board configuration with no queens

    int board[N][N] = { {0, 0, 0, 0},

                        {0, 0, 0, 0},

                        {0, 0, 0, 0},

                        {0, 0, 0, 0} };



    // Placing queens on the board

    // In this example, we'll place one queen in each row

    board[0][1] = 1; // Placing queen at (0, 1)

    board[1][3] = 1; // Placing queen at (1, 3)

    board[2][0] = 1; // Placing queen at (2, 0)

    board[3][2] = 1; // Placing queen at (3, 2)



    // Print the board configuration

    printf("Board Configuration:\n");

    printBoard(board);



    return 0;

}

