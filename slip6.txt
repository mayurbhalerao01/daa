Slip 6



 Write a program for the Implementation of Primâ€™s algorithm to find minimum cost spanning tree.



#include <stdio.h>

#include <limits.h>



#define V 5 // Number of vertices in the graph



// Function to find the vertex with minimum key value, from the set of vertices not yet included in MST

int minKey(int key[], int mstSet[]) {

    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {

        if (mstSet[v] == 0 && key[v] < min) {

            min = key[v];

            min_index = v;

        }

    }

    return min_index;

}



// Function to print the constructed MST stored in parent[]

void printMST(int parent[], int graph[V][V]) {

    printf("Edge   Weight\n");

    for (int i = 1; i < V; i++)

        printf("%d - %d    %d \n", parent[i], i, graph[i][parent[i]]);

}



// Function to construct and print MST for a graph represented using adjacency matrix representation

void primMST(int graph[V][V]) {

    int parent[V]; // Array to store constructed MST

    int key[V];    // Key values used to pick minimum weight edge in cut

    int mstSet[V]; // To represent set of vertices not yet included in MST



    // Initialize all keys as INFINITE

    for (int i = 0; i < V; i++) {

        key[i] = INT_MAX;

        mstSet[i] = 0;

    }



    // Always include first  vertex in MST.

    key[0] = 0; // Make key 0 so that this vertex is picked as first vertex

    parent[0] = -1; // First node is always root of MST



    // The MST will have V vertices

    for (int count = 0; count < V - 1; count++) {

        // Pick the minimum key vertex from the set of vertices not yet included in MST

        int u = minKey(key, mstSet);



        // Add the picked vertex to the MST Set

        mstSet[u] = 1;



        // Update key value and parent index of the adjacent vertices of the picked vertex.

        // Consider only those vertices which are not yet included in MST

        for (int v = 0; v < V; v++) {

            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v]) {

                parent[v] = u;

                key[v] = graph[u][v];

            }

        }

    }



    // Print the constructed MST

    printMST(parent, graph);

}



int main() {

    // Example graph represented using adjacency matrix

    int graph[V][V] = {

        {0, 2, 0, 6, 0},

        {2, 0, 3, 8, 5},

        {0, 3, 0, 0, 7},

        {6, 8, 0, 0, 9},

        {0, 5, 7, 9, 0}

    };



    // Print the MST

    printf("Minimum Spanning Tree using Prim's algorithm:\n");

    primMST(graph);



    return 0;

}




Write a Program to find only length of Longest Common Subsequence.

#include <stdio.h>
#include <string.h>

int max(int a, int b) {
    return (a > b) ? a : b;
}

int lcsLength(char *X, char *Y, int m, int n) {
    int L[m + 1][n + 1];
    int i, j;

    // Build L[m+1][n+1] in bottom-up fashion
    for (i = 0; i <= m; i++) {
        for (j = 0; j <= n; j++) {
            if (i == 0 || j == 0)
                L[i][j] = 0;
            else if (X[i - 1] == Y[j - 1])
                L[i][j] = L[i - 1][j - 1] + 1;
            else
                L[i][j] = max(L[i - 1][j], L[i][j - 1]);
        }
    }

    return L[m][n];
}

int main() {
    char X[] = "AGGTAB";
    char Y[] = "GXTXAYB";

    int m = strlen(X);
    int n = strlen(Y);

    printf("Length of Longest Common Subsequence is %d\n", lcsLength(X, Y, m, n));

    return 0;
}

