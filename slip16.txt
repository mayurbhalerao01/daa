Slip 16

Write a program to implement to find out solution for 0/1 knapsack problem using dynamic programming.

#include <stdio.h>



// Function to find the maximum of two integers

int max(int a, int b) {

    return (a > b) ? a : b;

}



// Function to solve the 0/1 Knapsack problem using dynamic programming

int knapSack(int W, int wt[], int val[], int n) {

    int i, w;

    int K[n + 1][W + 1];



    // Build table K[][] in bottom-up manner

    for (i = 0; i <= n; i++) {

        for (w = 0; w <= W; w++) {

            if (i == 0 || w == 0)

                K[i][w] = 0;

            else if (wt[i - 1] <= w)

                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);

            else

                K[i][w] = K[i - 1][w];

        }

    }



    return K[n][W];

}



int main() {

    int val[] = {60, 100, 120};

    int wt[] = {10, 20, 30};

    int W = 50;

    int n = sizeof(val) / sizeof(val[0]);



    printf("Maximum value that can be obtained is %d\n", knapSack(W, wt, val, n));



    return 0;

}





 

Write a program to determine if a given graph is a Hamiltonian cycle or not.



#include <stdio.h>

#include <stdbool.h>



#define V 5 // Number of vertices in the graph



// Function to check if the vertex v can be added at index pos in the Hamiltonian Cycle

bool isSafe(int v, bool graph[V][V], int path[], int pos) {

    // Check if this vertex is an adjacent vertex of the previously added vertex

    if (!graph[path[pos - 1]][v])

        return false;



    // Check if the vertex has already been included

    for (int i = 0; i < pos; i++)

        if (path[i] == v)

            return false;



    return true;

}



// Function to recursively solve the Hamiltonian Cycle problem

bool hamCycleUtil(bool graph[V][V], int path[], int pos) {

    // Base case: if all vertices are included in the path

    if (pos == V) {

        // And if there is an edge from the last included vertex to the first vertex

        if (graph[path[pos - 1]][path[0]])

            return true;

        else

            return false;

    }



    // Try different vertices as the next candidate in the path

    for (int v = 1; v < V; v++) {

        if (isSafe(v, graph, path, pos)) {

            path[pos] = v;

            if (hamCycleUtil(graph, path, pos + 1) == true)

                return true;

            path[pos] = -1;

        }

    }



    // If no vertex can be added to the path

    return false;

}



// Function to solve the Hamiltonian Cycle problem

bool hamCycle(bool graph[V][V]) {

    int path[V];

    for (int i = 0; i < V; i++)

        path[i] = -1;



    // Start from the first vertex (vertex 0) as the first vertex in the path

    path[0] = 0;



    if (hamCycleUtil(graph, path, 1) == false) {

        printf("Solution does not exist\n");

        return false;

    }



    // Print the solution

    printf("Solution exists: Following is one Hamiltonian cycle\n");

    for (int i = 0; i < V; i++)

        printf("%d ", path[i]);

    printf("%d ", path[0]); // Include the first vertex again to form a cycle

    printf("\n");



    return true;

}



int main() {

    bool graph[V][V] = {

        {0, 1, 0, 1, 0},

        {1, 0, 1, 1, 1},

        {0, 1, 0, 0, 1},

        {1, 1, 0, 0, 1},

        {0, 1, 1, 1, 0}

    };



    hamCycle(graph);



    return 0;

}