Write a program to sort a list of n numbers in ascending order using selection sort and determine the time required to sort the elements.

#include <stdio.h>

#include <stdlib.h>

#include <time.h>



void selectionSort(int arr[], int n) {

    int i, j, minIndex, temp;

    for (i = 0; i < n - 1; i++) {

        minIndex = i;

        for (j = i + 1; j < n; j++) {

            if (arr[j] < arr[minIndex]) {

                minIndex = j;

            }

        }

        // Swap arr[minIndex] and arr[i]

        temp = arr[minIndex];

        arr[minIndex] = arr[i];

        arr[i] = temp;

    }

}



int main() {

    int n, i;

    clock_t start, end;

    double cpu_time_used;



    printf("Enter the number of elements: ");

    scanf("%d", &n);



    int *arr = (int *)malloc(n * sizeof(int));



    printf("Enter %d integers:\n", n);

    for (i = 0; i < n; i++) {

        scanf("%d", &arr[i]);

    }



    start = clock();

    selectionSort(arr, n);

    end = clock();



    printf("Sorted list in ascending order:\n");

    for (i = 0; i < n; i++) {

        printf("%d ", arr[i]);

    }



    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("\nTime taken to sort: %lf seconds\n", cpu_time_used);



    free(arr); // Free dynamically allocated memory

    return 0;

}




Write a program to sort a given set of elements using the Quick sort method and determine the time required to sort the elements. Repeat the experiment for different values of n, the number of elements in the list to be sorted. The elements can be read from a file or can be generated using the random number generator



#include <stdio.h>

#include <stdlib.h>

#include <time.h>



void swap(int *a, int *b) {

    int temp = *a;

    *a = *b;

    *b = temp;

}



int partition(int arr[], int low, int high) {

    int pivot = arr[high];

    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {

        if (arr[j] < pivot) {

            i++;

            swap(&arr[i], &arr[j]);

        }

    }

    swap(&arr[i + 1], &arr[high]);

    return i + 1;

}



void quickSort(int arr[], int low, int high) {

    if (low < high) {

        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);

        quickSort(arr, pi + 1, high);

    }

}



int main() {

    FILE *file;

    file = fopen("numbers.txt", "w");



    if (file == NULL) {

        printf("Error opening file.\n");

        return 1;

    }



    // Generate random numbers and write to file

    srand(time(NULL));

    int n_values[] = {10, 100, 1000, 10000}; // Different values of n

    for (int k = 0; k < sizeof(n_values) / sizeof(n_values[0]); k++) {

        int n = n_values[k];

        fprintf(file, "n = %d\n", n);

        for (int i = 0; i < n; i++) {

            fprintf(file, "%d ", rand() % 1000);

        }

        fprintf(file, "\n");

    }

    fclose(file);



    // Read numbers from file and sort using quick sort

    file = fopen("numbers.txt", "r");

    if (file == NULL) {

        printf("Error opening file.\n");

        return 1;

    }



    int num, n;

    clock_t start, end;

    double cpu_time_used;



    while (fscanf(file, "n = %d", &n) == 1) {

        int arr[n];

        for (int i = 0; i < n; i++) {

            fscanf(file, "%d", &arr[i]);

        }



        start = clock();

        quickSort(arr, 0, n - 1);

        end = clock();



        cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

        printf("Time taken to sort %d elements using Quick sort: %lf seconds\n", n, cpu_time_used);

    }



    fclose(file);

    return 0;

}