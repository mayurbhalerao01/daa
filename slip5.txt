Slip 5

 Write a program for the Implementation of Kruskalâ€™s algorithm to find minimum cost spanning tree

#include <stdio.h>

#include <stdlib.h>



// Structure to represent an edge in the graph

struct Edge {

    int src, dest, weight;

};



// Structure to represent a subset for union-find

struct Subset {

    int parent;

    int rank;

};



// Function to find set of an element i

int find(struct Subset subsets[], int i) {

    if (subsets[i].parent != i)

        subsets[i].parent = find(subsets, subsets[i].parent);



    return subsets[i].parent;

}



// Function that does union of two sets of x and y

void Union(struct Subset subsets[], int x, int y) {

    int xroot = find(subsets, x);

    int yroot = find(subsets, y);



    // Attach smaller rank tree under root of high rank tree

    if (subsets[xroot].rank < subsets[yroot].rank)

        subsets[xroot].parent = yroot;

    else if (subsets[xroot].rank > subsets[yroot].rank)

        subsets[yroot].parent = xroot;

    else {

        subsets[yroot].parent = xroot;

        subsets[xroot].rank++;

    }

}



// Comparator function for sorting edges based on their weights

int compare(const void *a, const void *b) {

    struct Edge *a1 = (struct Edge *)a;

    struct Edge *b1 = (struct Edge *)b;

    return a1->weight - b1->weight;

}



// Function to find the Minimum Cost Spanning Tree using Kruskal's algorithm

void KruskalMST(struct Edge edges[], int V, int E) {

    struct Edge result[V]; // This will store the resultant MST

    int e = 0;             // Index variable for result[]



    // Sort all the edges in non-decreasing order of their weight

    qsort(edges, E, sizeof(edges[0]), compare);



    // Allocate memory for creating V subsets

    struct Subset *subsets = (struct Subset *)malloc(V * sizeof(struct Subset));



    // Create V subsets with single elements

    for (int v = 0; v < V; v++) {

        subsets[v].parent = v;

        subsets[v].rank = 0;

    }



    // Number of edges to be taken is equal to V-1

    while (e < V - 1 && E > 0) {

        // Pick the smallest edge. Increment the index for the next iteration

        struct Edge next_edge = edges[E - 1];

        E--;



        int x = find(subsets, next_edge.src);

        int y = find(subsets, next_edge.dest);



        // If including this edge does't cause cycle, include it in result and increment the index

        if (x != y) {

            result[e] = next_edge;

            e++;

            Union(subsets, x, y);

        }

    }



    // Print the Minimum Cost Spanning Tree

    printf("Edges in the Minimum Cost Spanning Tree:\n");

    for (int i = 0; i < e; i++) {

        printf("%d - %d : %d\n", result[i].src, result[i].dest, result[i].weight);

    }



    free(subsets);

}



int main() {

    int V, E;

    printf("Enter the number of vertices and edges: ");

    scanf("%d %d", &V, &E);



    struct Edge edges[E];

    printf("Enter the source, destination, and weight of each edge:\n");

    for (int i = 0; i < E; i++) {

        printf("Edge %d: ", i + 1);

        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);

    }



    KruskalMST(edges, V, E);



    return 0;

}



Write a program to implement Huffman Code using greedy methods and also calculate the best case and worst-case complexity

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Structure for a Huffman tree node
struct MinHeapNode {
    char data;
    unsigned freq;
    struct MinHeapNode *left, *right;
};

// Structure for a min heap
struct MinHeap {
    unsigned size;
    unsigned capacity;
    struct MinHeapNode **array;
};

// Function to create a new min heap node
struct MinHeapNode *newNode(char data, unsigned freq) {
    struct MinHeapNode *temp = (struct MinHeapNode *)malloc(sizeof(struct MinHeapNode));
    temp->left = temp->right = NULL;
    temp->data = data;
    temp->freq = freq;
    return temp;
}

// Function to create a min heap of given capacity
struct MinHeap *createMinHeap(unsigned capacity) {
    struct MinHeap *minHeap = (struct MinHeap *)malloc(sizeof(struct MinHeap));
    minHeap->size = 0;
    minHeap->capacity = capacity;
    minHeap->array = (struct MinHeapNode **)malloc(minHeap->capacity * sizeof(struct MinHeapNode *));
    return minHeap;
}

// Function to swap two min heap nodes
void swapMinHeapNode(struct MinHeapNode **a, struct MinHeapNode **b) {
    struct MinHeapNode *t = *a;
    *a = *b;
    *b = t;
}

// Function to heapify at given index
void minHeapify(struct MinHeap *minHeap, int idx) {
    int smallest = idx;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;

    if (left < minHeap->size && minHeap->array[left]->freq < minHeap->array[smallest]->freq)
        smallest = left;

    if (right < minHeap->size && minHeap->array[right]->freq < minHeap->array[smallest]->freq)
        smallest = right;

    if (smallest != idx) {
        swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]);
        minHeapify(minHeap, smallest);
    }
}

// Function to check if size of heap is 1 or not
int isSizeOne(struct MinHeap *minHeap) {
    return (minHeap->size == 1);
}

// Function to extract the minimum value node from heap
struct MinHeapNode *extractMin(struct MinHeap *minHeap) {
    struct MinHeapNode *temp = minHeap->array[0];
    minHeap->array[0] = minHeap->array[minHeap->size - 1];
    --minHeap->size;
    minHeapify(minHeap, 0);
    return temp;
}

// Function to insert a new node to Min Heap
void insertMinHeap(struct MinHeap *minHeap, struct MinHeapNode *minHeapNode) {
    ++minHeap->size;
    int i = minHeap->size - 1;
    while (i && minHeapNode->freq < minHeap->array[(i - 1) / 2]->freq) {
        minHeap->array[i] = minHeap->array[(i - 1) / 2];
        i = (i - 1) / 2;
    }
    minHeap->array[i] = minHeapNode;
}

// Function to build Huffman tree
struct MinHeapNode *buildHuffmanTree(char data[], int freq[], int size) {
    struct MinHeapNode *left, *right, *top;

    struct MinHeap *minHeap = createMinHeap(size);

    for (int i = 0; i < size; ++i)
        insertMinHeap(minHeap, newNode(data[i], freq[i]));

    while (!isSizeOne(minHeap)) {
        left = extractMin(minHeap);
        right = extractMin(minHeap);

        top = newNode('$', left->freq + right->freq);
        top->left = left;
        top->right = right;

        insertMinHeap(minHeap, top);
    }

    return extractMin(minHeap);
}

// Function to print an array
void printArr(int arr[], int n) {
    for (int i = 0; i < n; ++i)
        printf("%d", arr[i]);
    printf("\n");
}

// Function to print Huffman codes from the root of Huffman tree
void printCodes(struct MinHeapNode *root, int arr[], int top) {
    if (root->left) {
        arr[top] = 0;
        printCodes(root->left, arr, top + 1);
    }

    if (root->right) {
        arr[top] = 1;
        printCodes(root->right, arr, top + 1);
    }

    if (!root->left && !root->right) {
        printf("%c: ", root->data);
        printArr(arr, top);
    }
}

// Function to build Huffman tree and print codes by traversing the tree
void HuffmanCodes(char data[], int freq[], int size) {
    struct MinHeapNode *root = buildHuffmanTree(data, freq, size);
    int arr[100], top = 0;
    printCodes(root, arr, top);
}

// Function to calculate best-case and worst-case complexity of Huffman Coding
void complexity(int freq[], int size) {
    int min = INT_MAX, max = INT_MIN;
    for (int i = 

