Slip 2

Write a program to sort n randomly generated elements using Heapsort method



#include <stdio.h>

#include <stdlib.h>

#include <time.h>



void heapify(int arr[], int n, int i) {

    int largest = i;

    int left = 2 * i + 1;

    int right = 2 * i + 2;



    if (left < n && arr[left] > arr[largest])

        largest = left;



    if (right < n && arr[right] > arr[largest])

        largest = right;



    if (largest != i) {

        int temp = arr[i];

        arr[i] = arr[largest];

        arr[largest] = temp;

        heapify(arr, n, largest);

    }

}



void heapSort(int arr[], int n) {

    for (int i = n / 2 - 1; i >= 0; i--)

        heapify(arr, n, i);



    for (int i = n - 1; i >= 0; i--) {

        int temp = arr[0];

        arr[0] = arr[i];

        arr[i] = temp;

        heapify(arr, i, 0);

    }

}



int main() {

    int n;

    clock_t start, end;

    double cpu_time_used;



    printf("Enter the number of elements: ");

    scanf("%d", &n);



    int arr[n];



    // Generate random numbers and store them in arr

    srand(time(NULL));

    for (int i = 0; i < n; i++) {

        arr[i] = rand() % 1000; // Generating numbers between 0 and 999

    }



    printf("Unsorted array:\n");

    for (int i = 0; i < n; i++) {

        printf("%d ", arr[i]);

    }

    printf("\n");



    start = clock();

    heapSort(arr, n);

    end = clock();



    printf("Sorted array:\n");

    for (int i = 0; i < n; i++) {

        printf("%d ", arr[i]);

    }

    printf("\n");



    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Time taken to sort: %lf seconds\n", cpu_time_used);



    return 0;

}




Write a program to implement Strassenâ€™s Matrix multiplication


#include <stdio.h>

#include <stdlib.h>



// Function to add two matrices

void add(int n, int A[][n], int B[][n], int C[][n]) {

    for (int i = 0; i < n; i++) {

        for (int j = 0; j < n; j++) {

            C[i][j] = A[i][j] + B[i][j];

        }

    }

}



// Function to subtract two matrices

void subtract(int n, int A[][n], int B[][n], int C[][n]) {

    for (int i = 0; i < n; i++) {

        for (int j = 0; j < n; j++) {

            C[i][j] = A[i][j] - B[i][j];

        }

    }

}



// Function to multiply two matrices using Strassen's algorithm

void strassen(int n, int A[][n], int B[][n], int C[][n]) {

    if (n == 1) {

        C[0][0] = A[0][0] * B[0][0];

        return;

    }



    int newSize = n / 2;

    int A11[newSize][newSize], A12[newSize][newSize], A21[newSize][newSize], A22[newSize][newSize];

    int B11[newSize][newSize], B12[newSize][newSize], B21[newSize][newSize], B22[newSize][newSize];

    int C11[newSize][newSize], C12[newSize][newSize], C21[newSize][newSize], C22[newSize][newSize];

    int M1[newSize][newSize], M2[newSize][newSize], M3[newSize][newSize], M4[newSize][newSize], M5[newSize][newSize], M6[newSize][newSize], M7[newSize][newSize];

    int temp1[newSize][newSize], temp2[newSize][newSize];



    // Divide matrices A and B into 4 submatrices each

    for (int i = 0; i < newSize; i++) {

        for (int j = 0; j < newSize; j++) {

            A11[i][j] = A[i][j];

            A12[i][j] = A[i][j + newSize];

            A21[i][j] = A[i + newSize][j];

            A22[i][j] = A[i + newSize][j + newSize];



            B11[i][j] = B[i][j];

            B12[i][j] = B[i][j + newSize];

            B21[i][j] = B[i + newSize][j];

            B22[i][j] = B[i + newSize][j + newSize];

        }

    }



    // Calculate M1 to M7 matrices

    add(newSize, A11, A22, temp1);

    add(newSize, B11, B22, temp2);

    strassen(newSize, temp1, temp2, M1);



    add(newSize, A21, A22, temp1);

    strassen(newSize, temp1, B11, M2);



    subtract(newSize, B12, B22, temp1);

    strassen(newSize, A11, temp1, M3);



    subtract(newSize, B21, B11, temp1);

    strassen(newSize, A22, temp1, M4);



    add(newSize, A11, A12, temp1);

    strassen(newSize, temp1, B22, M5);



    subtract(newSize, A21, A11, temp1);

    add(newSize, B11, B12, temp2);

    strassen(newSize, temp1, temp2, M6);



    subtract(newSize, A12, A22, temp1);

    add(newSize, B21, B22, temp2);

    strassen(newSize, temp1, temp2, M7);



    // Calculate C matrices

    add(newSize, M1, M4, temp1);

    subtract(newSize, temp1, M5, temp2);

    add(newSize, temp2, M7, C11);



    add(newSize, M3, M5, C12);



    add(newSize, M2, M4, C21);



    add(newSize, M1, M3, temp1);

    subtract(newSize, temp1, M2, temp2);

    add(newSize, temp2, M6, C22);



    // Combine C matrices into one result matrix C

    for (int i = 0; i < newSize; i++) {

        for (int j = 0; j < newSize; j++) {

            C[i][j] = C11[i][j];

            C[i][j + newSize] = C12[i][j];

            C[i + newSize][j] = C21[i][j];

            C[i + newSize][j + newSize] = C22[i][j];

        }

    }

}



// Function to print a matrix

void printMatrix(int n, int A[][n]) {

    for (int i = 0; i < n; i++) {

        for (int j = 0; j < n; j++) {

            printf("%d\t", A[i][j]);

        }

        printf("\n");

    }

}



int main() {

    int n;



    printf("Enter the size of square matrices: ");

    scanf("%d", &n);



    if (n <= 0) {

        printf("Invalid matrix size.\n");

        return 1;

    }



    if (n & (n - 1)) {

        printf("Matrix size must be a power of 2.\n");

        return 1;

    }



    int A[n][n], B[n][n], C[n][n];



    printf("Enter elements of matrix A:\n");

    for (int i = 0; i < n; i++) {

        for (int j = 0; j < n; j++) {

            scanf("%d", &A[i][j]);

        }

    }



    printf("Enter elements of matrix B:\n");

    for (int i = 0; i < n; i++) {

        for (int j = 0; j < n; j++) {

            scanf("%d", &B[i][j]);

        }

    }



    strassen(n, A, B, C);



    printf("Resultant matrix C:\n");

    printMatrix(n, C);



    return 0;

}