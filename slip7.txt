lip 7



Write a program for the Implementation of Dijkstraâ€™s algorithm to find shortest path to other vertices



#include <stdio.h>

#include <limits.h>



#define V 9 // Number of vertices in the graph



// Function to find the vertex with minimum distance value, from the set of vertices not yet included in shortest path tree

int minDistance(int dist[], int sptSet[]) {

    int min = INT_MAX, min_index;



    for (int v = 0; v < V; v++)

        if (sptSet[v] == 0 && dist[v] <= min)

            min = dist[v], min_index = v;



    return min_index;

}



// Function to print the constructed distance array

void printSolution(int dist[]) {

    printf("Vertex \t Distance from Source\n");

    for (int i = 0; i < V; i++)

        printf("%d \t %d\n", i, dist[i]);

}



// Function that implements Dijkstra's single source shortest path algorithm for a graph represented using adjacency matrix

void dijkstra(int graph[V][V], int src) {

    int dist[V]; // The output array. dist[i] will hold the shortest distance from src to i



    int sptSet[V]; // sptSet[i] will be true if vertex i is included in shortest path tree or shortest distance from src to i is finalized



    // Initialize all distances as INFINITE and sptSet[] as false

    for (int i = 0; i < V; i++)

        dist[i] = INT_MAX, sptSet[i] = 0;



    // Distance of source vertex from itself is always 0

    dist[src] = 0;



    // Find shortest path for all vertices

    for (int count = 0; count < V - 1; count++) {

        // Pick the minimum distance vertex from the set of vertices not yet processed. u is always equal to src in the first iteration

        int u = minDistance(dist, sptSet);



        // Mark the picked vertex as processed

        sptSet[u] = 1;



        // Update dist value of the adjacent vertices of the picked vertex

        for (int v = 0; v < V; v++)



            // Update dist[v] only if it's not in sptSet, there's an edge from u to v, and the total weight of path from src to v through u is smaller than current value of dist[v]

            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])

                dist[v] = dist[u] + graph[u][v];

    }



    // Print the constructed distance array

    printSolution(dist);

}



int main() {

    // Example graph represented using adjacency matrix

    int graph[V][V] = {

        {0, 4, 0, 0, 0, 0, 0, 8, 0},

        {4, 0, 8, 0, 0, 0, 0, 11, 0},

        {0, 8, 0, 7, 0, 4, 0, 0, 2},

        {0, 0, 7, 0, 9, 14, 0, 0, 0},

        {0, 0, 0, 9, 0, 10, 0, 0, 0},

        {0, 0, 4, 14, 10, 0, 2, 0, 0},

        {0, 0, 0, 0, 0, 2, 0, 1, 6},

        {8, 11, 0, 0, 0, 0, 1, 0, 7},

        {0, 0, 2, 0, 0, 0, 6, 7, 0}

    };



    dijkstra(graph, 0);



    return 0;

}





Write a program for finding Topological sorting for Directed Acyclic Graph (DAG)

#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// Structure to represent a graph node
struct Node {
    int vertex;
    struct Node *next;
};

// Structure to represent a graph
struct Graph {
    int numVertices;
    struct Node **adjLists;
    int *visited;
};

// Function to create a new graph node
struct Node *createNode(int v) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with given number of vertices
struct Graph *createGraph(int vertices) {
    struct Graph *graph = (struct Graph *)malloc(sizeof(struct Graph));
    graph->numVertices = vertices;

    graph->adjLists = (struct Node **)malloc(vertices * sizeof(struct Node *));
    graph->visited = (int *)malloc(vertices * sizeof(int));

    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
        graph->visited[i] = 0;
    }

    return graph;
}

// Function to add an edge to the graph
void addEdge(struct Graph *graph, int src, int dest) {
    struct Node *newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
}

// Function to perform DFS
void DFS(struct Graph *graph, int vertex, int *topologicalOrder, int *index) {
    struct Node *adjList = graph->adjLists[vertex];
    graph->visited[vertex] = 1;

    while (adjList != NULL) {
        int connectedVertex = adjList->vertex;
        if (!graph->visited[connectedVertex]) {
            DFS(graph, connectedVertex, topologicalOrder, index);
        }
        adjList = adjList->next;
    }

    topologicalOrder[*index] = vertex;
    (*index)--;
}

// Function to perform topological sorting
void topologicalSort(struct Graph *graph) {
    int *topologicalOrder = (int *)malloc(graph->numVertices * sizeof(int));
    int index = graph->numVertices - 1;

    for (int vertex = 0; vertex < graph->numVertices; vertex++) {
        if (!graph->visited[vertex]) {
            DFS(graph, vertex, topologicalOrder, &index);
        }
    }

    printf("Topological Sorting: ");
    for (int i = 0; i < graph->numVertices; i++) {
        printf("%d ", topologicalOrder[i]);
    }
    printf("\n");

    free(topologicalOrder);
}

int main() {
    int vertices, edges;
    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &vertices, &edges);

    struct Graph *graph = createGraph(vertices);

    printf("Enter the edges (source destination):\n");
    for (int i = 0; i < edges; i++) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    topologicalSort(graph);

    return 0;
}